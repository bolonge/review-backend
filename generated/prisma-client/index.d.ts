// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  blackList: (where?: BlackListWhereInput) => Promise<boolean>;
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  hate: (where?: HateWhereInput) => Promise<boolean>;
  keyword: (where?: KeywordWhereInput) => Promise<boolean>;
  like: (where?: LikeWhereInput) => Promise<boolean>;
  photo: (where?: PhotoWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  report: (where?: ReportWhereInput) => Promise<boolean>;
  review: (where?: ReviewWhereInput) => Promise<boolean>;
  suggestion: (where?: SuggestionWhereInput) => Promise<boolean>;
  superCategory: (where?: SuperCategoryWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  blackList: (where: BlackListWhereUniqueInput) => BlackListNullablePromise;
  blackLists: (args?: {
    where?: BlackListWhereInput;
    orderBy?: BlackListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<BlackList>;
  blackListsConnection: (args?: {
    where?: BlackListWhereInput;
    orderBy?: BlackListOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BlackListConnectionPromise;
  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  hate: (where: HateWhereUniqueInput) => HateNullablePromise;
  hates: (args?: {
    where?: HateWhereInput;
    orderBy?: HateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Hate>;
  hatesConnection: (args?: {
    where?: HateWhereInput;
    orderBy?: HateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HateConnectionPromise;
  keyword: (where: KeywordWhereUniqueInput) => KeywordNullablePromise;
  keywords: (args?: {
    where?: KeywordWhereInput;
    orderBy?: KeywordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Keyword>;
  keywordsConnection: (args?: {
    where?: KeywordWhereInput;
    orderBy?: KeywordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => KeywordConnectionPromise;
  like: (where: LikeWhereUniqueInput) => LikeNullablePromise;
  likes: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Like>;
  likesConnection: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LikeConnectionPromise;
  photo: (where: PhotoWhereUniqueInput) => PhotoNullablePromise;
  photos: (args?: {
    where?: PhotoWhereInput;
    orderBy?: PhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Photo>;
  photosConnection: (args?: {
    where?: PhotoWhereInput;
    orderBy?: PhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PhotoConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  report: (where: ReportWhereUniqueInput) => ReportNullablePromise;
  reports: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Report>;
  reportsConnection: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReportConnectionPromise;
  review: (where: ReviewWhereUniqueInput) => ReviewNullablePromise;
  reviews: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Review>;
  reviewsConnection: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReviewConnectionPromise;
  suggestion: (where: SuggestionWhereUniqueInput) => SuggestionNullablePromise;
  suggestions: (args?: {
    where?: SuggestionWhereInput;
    orderBy?: SuggestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Suggestion>;
  suggestionsConnection: (args?: {
    where?: SuggestionWhereInput;
    orderBy?: SuggestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SuggestionConnectionPromise;
  superCategory: (
    where: SuperCategoryWhereUniqueInput
  ) => SuperCategoryNullablePromise;
  superCategories: (args?: {
    where?: SuperCategoryWhereInput;
    orderBy?: SuperCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SuperCategory>;
  superCategoriesConnection: (args?: {
    where?: SuperCategoryWhereInput;
    orderBy?: SuperCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SuperCategoryConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBlackList: (data: BlackListCreateInput) => BlackListPromise;
  updateBlackList: (args: {
    data: BlackListUpdateInput;
    where: BlackListWhereUniqueInput;
  }) => BlackListPromise;
  updateManyBlackLists: (args: {
    data: BlackListUpdateManyMutationInput;
    where?: BlackListWhereInput;
  }) => BatchPayloadPromise;
  upsertBlackList: (args: {
    where: BlackListWhereUniqueInput;
    create: BlackListCreateInput;
    update: BlackListUpdateInput;
  }) => BlackListPromise;
  deleteBlackList: (where: BlackListWhereUniqueInput) => BlackListPromise;
  deleteManyBlackLists: (where?: BlackListWhereInput) => BatchPayloadPromise;
  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createHate: (data: HateCreateInput) => HatePromise;
  updateHate: (args: {
    data: HateUpdateInput;
    where: HateWhereUniqueInput;
  }) => HatePromise;
  upsertHate: (args: {
    where: HateWhereUniqueInput;
    create: HateCreateInput;
    update: HateUpdateInput;
  }) => HatePromise;
  deleteHate: (where: HateWhereUniqueInput) => HatePromise;
  deleteManyHates: (where?: HateWhereInput) => BatchPayloadPromise;
  createKeyword: (data: KeywordCreateInput) => KeywordPromise;
  updateKeyword: (args: {
    data: KeywordUpdateInput;
    where: KeywordWhereUniqueInput;
  }) => KeywordPromise;
  updateManyKeywords: (args: {
    data: KeywordUpdateManyMutationInput;
    where?: KeywordWhereInput;
  }) => BatchPayloadPromise;
  upsertKeyword: (args: {
    where: KeywordWhereUniqueInput;
    create: KeywordCreateInput;
    update: KeywordUpdateInput;
  }) => KeywordPromise;
  deleteKeyword: (where: KeywordWhereUniqueInput) => KeywordPromise;
  deleteManyKeywords: (where?: KeywordWhereInput) => BatchPayloadPromise;
  createLike: (data: LikeCreateInput) => LikePromise;
  updateLike: (args: {
    data: LikeUpdateInput;
    where: LikeWhereUniqueInput;
  }) => LikePromise;
  upsertLike: (args: {
    where: LikeWhereUniqueInput;
    create: LikeCreateInput;
    update: LikeUpdateInput;
  }) => LikePromise;
  deleteLike: (where: LikeWhereUniqueInput) => LikePromise;
  deleteManyLikes: (where?: LikeWhereInput) => BatchPayloadPromise;
  createPhoto: (data: PhotoCreateInput) => PhotoPromise;
  updatePhoto: (args: {
    data: PhotoUpdateInput;
    where: PhotoWhereUniqueInput;
  }) => PhotoPromise;
  updateManyPhotos: (args: {
    data: PhotoUpdateManyMutationInput;
    where?: PhotoWhereInput;
  }) => BatchPayloadPromise;
  upsertPhoto: (args: {
    where: PhotoWhereUniqueInput;
    create: PhotoCreateInput;
    update: PhotoUpdateInput;
  }) => PhotoPromise;
  deletePhoto: (where: PhotoWhereUniqueInput) => PhotoPromise;
  deleteManyPhotos: (where?: PhotoWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createReport: (data: ReportCreateInput) => ReportPromise;
  updateReport: (args: {
    data: ReportUpdateInput;
    where: ReportWhereUniqueInput;
  }) => ReportPromise;
  updateManyReports: (args: {
    data: ReportUpdateManyMutationInput;
    where?: ReportWhereInput;
  }) => BatchPayloadPromise;
  upsertReport: (args: {
    where: ReportWhereUniqueInput;
    create: ReportCreateInput;
    update: ReportUpdateInput;
  }) => ReportPromise;
  deleteReport: (where: ReportWhereUniqueInput) => ReportPromise;
  deleteManyReports: (where?: ReportWhereInput) => BatchPayloadPromise;
  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (args: {
    data: ReviewUpdateInput;
    where: ReviewWhereUniqueInput;
  }) => ReviewPromise;
  updateManyReviews: (args: {
    data: ReviewUpdateManyMutationInput;
    where?: ReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertReview: (args: {
    where: ReviewWhereUniqueInput;
    create: ReviewCreateInput;
    update: ReviewUpdateInput;
  }) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;
  createSuggestion: (data: SuggestionCreateInput) => SuggestionPromise;
  updateSuggestion: (args: {
    data: SuggestionUpdateInput;
    where: SuggestionWhereUniqueInput;
  }) => SuggestionPromise;
  updateManySuggestions: (args: {
    data: SuggestionUpdateManyMutationInput;
    where?: SuggestionWhereInput;
  }) => BatchPayloadPromise;
  upsertSuggestion: (args: {
    where: SuggestionWhereUniqueInput;
    create: SuggestionCreateInput;
    update: SuggestionUpdateInput;
  }) => SuggestionPromise;
  deleteSuggestion: (where: SuggestionWhereUniqueInput) => SuggestionPromise;
  deleteManySuggestions: (where?: SuggestionWhereInput) => BatchPayloadPromise;
  createSuperCategory: (data: SuperCategoryCreateInput) => SuperCategoryPromise;
  updateSuperCategory: (args: {
    data: SuperCategoryUpdateInput;
    where: SuperCategoryWhereUniqueInput;
  }) => SuperCategoryPromise;
  updateManySuperCategories: (args: {
    data: SuperCategoryUpdateManyMutationInput;
    where?: SuperCategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertSuperCategory: (args: {
    where: SuperCategoryWhereUniqueInput;
    create: SuperCategoryCreateInput;
    update: SuperCategoryUpdateInput;
  }) => SuperCategoryPromise;
  deleteSuperCategory: (
    where: SuperCategoryWhereUniqueInput
  ) => SuperCategoryPromise;
  deleteManySuperCategories: (
    where?: SuperCategoryWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  blackList: (
    where?: BlackListSubscriptionWhereInput
  ) => BlackListSubscriptionPayloadSubscription;
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  hate: (
    where?: HateSubscriptionWhereInput
  ) => HateSubscriptionPayloadSubscription;
  keyword: (
    where?: KeywordSubscriptionWhereInput
  ) => KeywordSubscriptionPayloadSubscription;
  like: (
    where?: LikeSubscriptionWhereInput
  ) => LikeSubscriptionPayloadSubscription;
  photo: (
    where?: PhotoSubscriptionWhereInput
  ) => PhotoSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  report: (
    where?: ReportSubscriptionWhereInput
  ) => ReportSubscriptionPayloadSubscription;
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
  suggestion: (
    where?: SuggestionSubscriptionWhereInput
  ) => SuggestionSubscriptionPayloadSubscription;
  superCategory: (
    where?: SuperCategorySubscriptionWhereInput
  ) => SuperCategorySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BlackListOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "productName_ASC"
  | "productName_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "requestInfo_ASC"
  | "requestInfo_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type KeywordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "search_ASC"
  | "search_DESC"
  | "count_ASC"
  | "count_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "text_ASC"
  | "text_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC";

export type LikeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type HateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PhotoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "categoryName_ASC"
  | "categoryName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ReportOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "why_ASC"
  | "why_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SuggestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SuperCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "superCategoryName_ASC"
  | "superCategoryName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "nickName_ASC"
  | "nickName_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "loginSecret_ASC"
  | "loginSecret_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BlackListWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BlackListWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BlackListWhereInput[] | BlackListWhereInput>;
  OR?: Maybe<BlackListWhereInput[] | BlackListWhereInput>;
  NOT?: Maybe<BlackListWhereInput[] | BlackListWhereInput>;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  productName?: Maybe<String>;
  productName_not?: Maybe<String>;
  productName_in?: Maybe<String[] | String>;
  productName_not_in?: Maybe<String[] | String>;
  productName_lt?: Maybe<String>;
  productName_lte?: Maybe<String>;
  productName_gt?: Maybe<String>;
  productName_gte?: Maybe<String>;
  productName_contains?: Maybe<String>;
  productName_not_contains?: Maybe<String>;
  productName_starts_with?: Maybe<String>;
  productName_not_starts_with?: Maybe<String>;
  productName_ends_with?: Maybe<String>;
  productName_not_ends_with?: Maybe<String>;
  category_every?: Maybe<CategoryWhereInput>;
  category_some?: Maybe<CategoryWhereInput>;
  category_none?: Maybe<CategoryWhereInput>;
  reviews_every?: Maybe<ReviewWhereInput>;
  reviews_some?: Maybe<ReviewWhereInput>;
  reviews_none?: Maybe<ReviewWhereInput>;
  productPhoto?: Maybe<PhotoWhereInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  requestInfo?: Maybe<String>;
  requestInfo_not?: Maybe<String>;
  requestInfo_in?: Maybe<String[] | String>;
  requestInfo_not_in?: Maybe<String[] | String>;
  requestInfo_lt?: Maybe<String>;
  requestInfo_lte?: Maybe<String>;
  requestInfo_gt?: Maybe<String>;
  requestInfo_gte?: Maybe<String>;
  requestInfo_contains?: Maybe<String>;
  requestInfo_not_contains?: Maybe<String>;
  requestInfo_starts_with?: Maybe<String>;
  requestInfo_not_starts_with?: Maybe<String>;
  requestInfo_ends_with?: Maybe<String>;
  requestInfo_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  nickName?: Maybe<String>;
  nickName_not?: Maybe<String>;
  nickName_in?: Maybe<String[] | String>;
  nickName_not_in?: Maybe<String[] | String>;
  nickName_lt?: Maybe<String>;
  nickName_lte?: Maybe<String>;
  nickName_gt?: Maybe<String>;
  nickName_gte?: Maybe<String>;
  nickName_contains?: Maybe<String>;
  nickName_not_contains?: Maybe<String>;
  nickName_starts_with?: Maybe<String>;
  nickName_not_starts_with?: Maybe<String>;
  nickName_ends_with?: Maybe<String>;
  nickName_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  keyword_every?: Maybe<KeywordWhereInput>;
  keyword_some?: Maybe<KeywordWhereInput>;
  keyword_none?: Maybe<KeywordWhereInput>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  myReview_every?: Maybe<ReviewWhereInput>;
  myReview_some?: Maybe<ReviewWhereInput>;
  myReview_none?: Maybe<ReviewWhereInput>;
  myProduct_every?: Maybe<ProductWhereInput>;
  myProduct_some?: Maybe<ProductWhereInput>;
  myProduct_none?: Maybe<ProductWhereInput>;
  myComment_every?: Maybe<CommentWhereInput>;
  myComment_some?: Maybe<CommentWhereInput>;
  myComment_none?: Maybe<CommentWhereInput>;
  myLike_every?: Maybe<LikeWhereInput>;
  myLike_some?: Maybe<LikeWhereInput>;
  myLike_none?: Maybe<LikeWhereInput>;
  myHate_every?: Maybe<HateWhereInput>;
  myHate_some?: Maybe<HateWhereInput>;
  myHate_none?: Maybe<HateWhereInput>;
  loginSecret?: Maybe<String>;
  loginSecret_not?: Maybe<String>;
  loginSecret_in?: Maybe<String[] | String>;
  loginSecret_not_in?: Maybe<String[] | String>;
  loginSecret_lt?: Maybe<String>;
  loginSecret_lte?: Maybe<String>;
  loginSecret_gt?: Maybe<String>;
  loginSecret_gte?: Maybe<String>;
  loginSecret_contains?: Maybe<String>;
  loginSecret_not_contains?: Maybe<String>;
  loginSecret_starts_with?: Maybe<String>;
  loginSecret_not_starts_with?: Maybe<String>;
  loginSecret_ends_with?: Maybe<String>;
  loginSecret_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface KeywordWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  search?: Maybe<String>;
  search_not?: Maybe<String>;
  search_in?: Maybe<String[] | String>;
  search_not_in?: Maybe<String[] | String>;
  search_lt?: Maybe<String>;
  search_lte?: Maybe<String>;
  search_gt?: Maybe<String>;
  search_gte?: Maybe<String>;
  search_contains?: Maybe<String>;
  search_not_contains?: Maybe<String>;
  search_starts_with?: Maybe<String>;
  search_not_starts_with?: Maybe<String>;
  search_ends_with?: Maybe<String>;
  search_not_ends_with?: Maybe<String>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<KeywordWhereInput[] | KeywordWhereInput>;
  OR?: Maybe<KeywordWhereInput[] | KeywordWhereInput>;
  NOT?: Maybe<KeywordWhereInput[] | KeywordWhereInput>;
}

export interface ReviewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  rating?: Maybe<Float>;
  rating_not?: Maybe<Float>;
  rating_in?: Maybe<Float[] | Float>;
  rating_not_in?: Maybe<Float[] | Float>;
  rating_lt?: Maybe<Float>;
  rating_lte?: Maybe<Float>;
  rating_gt?: Maybe<Float>;
  rating_gte?: Maybe<Float>;
  product?: Maybe<ProductWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  likes_every?: Maybe<LikeWhereInput>;
  likes_some?: Maybe<LikeWhereInput>;
  likes_none?: Maybe<LikeWhereInput>;
  hates_every?: Maybe<HateWhereInput>;
  hates_some?: Maybe<HateWhereInput>;
  hates_none?: Maybe<HateWhereInput>;
  reviewPhotos_every?: Maybe<PhotoWhereInput>;
  reviewPhotos_some?: Maybe<PhotoWhereInput>;
  reviewPhotos_none?: Maybe<PhotoWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  OR?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  NOT?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  review?: Maybe<ReviewWhereInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface LikeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  review?: Maybe<ReviewWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  OR?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  NOT?: Maybe<LikeWhereInput[] | LikeWhereInput>;
}

export interface HateWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  review?: Maybe<ReviewWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<HateWhereInput[] | HateWhereInput>;
  OR?: Maybe<HateWhereInput[] | HateWhereInput>;
  NOT?: Maybe<HateWhereInput[] | HateWhereInput>;
}

export interface PhotoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  review?: Maybe<ReviewWhereInput>;
  product?: Maybe<ProductWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PhotoWhereInput[] | PhotoWhereInput>;
  OR?: Maybe<PhotoWhereInput[] | PhotoWhereInput>;
  NOT?: Maybe<PhotoWhereInput[] | PhotoWhereInput>;
}

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  categoryName?: Maybe<String>;
  categoryName_not?: Maybe<String>;
  categoryName_in?: Maybe<String[] | String>;
  categoryName_not_in?: Maybe<String[] | String>;
  categoryName_lt?: Maybe<String>;
  categoryName_lte?: Maybe<String>;
  categoryName_gt?: Maybe<String>;
  categoryName_gte?: Maybe<String>;
  categoryName_contains?: Maybe<String>;
  categoryName_not_contains?: Maybe<String>;
  categoryName_starts_with?: Maybe<String>;
  categoryName_not_starts_with?: Maybe<String>;
  categoryName_ends_with?: Maybe<String>;
  categoryName_not_ends_with?: Maybe<String>;
  product_every?: Maybe<ProductWhereInput>;
  product_some?: Maybe<ProductWhereInput>;
  product_none?: Maybe<ProductWhereInput>;
  superCategory?: Maybe<SuperCategoryWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export interface SuperCategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  superCategoryName?: Maybe<String>;
  superCategoryName_not?: Maybe<String>;
  superCategoryName_in?: Maybe<String[] | String>;
  superCategoryName_not_in?: Maybe<String[] | String>;
  superCategoryName_lt?: Maybe<String>;
  superCategoryName_lte?: Maybe<String>;
  superCategoryName_gt?: Maybe<String>;
  superCategoryName_gte?: Maybe<String>;
  superCategoryName_contains?: Maybe<String>;
  superCategoryName_not_contains?: Maybe<String>;
  superCategoryName_starts_with?: Maybe<String>;
  superCategoryName_not_starts_with?: Maybe<String>;
  superCategoryName_ends_with?: Maybe<String>;
  superCategoryName_not_ends_with?: Maybe<String>;
  category_every?: Maybe<CategoryWhereInput>;
  category_some?: Maybe<CategoryWhereInput>;
  category_none?: Maybe<CategoryWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SuperCategoryWhereInput[] | SuperCategoryWhereInput>;
  OR?: Maybe<SuperCategoryWhereInput[] | SuperCategoryWhereInput>;
  NOT?: Maybe<SuperCategoryWhereInput[] | SuperCategoryWhereInput>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type HateWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type KeywordWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  search?: Maybe<String>;
}>;

export type LikeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PhotoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  productName?: Maybe<String>;
}>;

export type ReportWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReportWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  review?: Maybe<ReviewWhereInput>;
  comment?: Maybe<CommentWhereInput>;
  why?: Maybe<String>;
  why_not?: Maybe<String>;
  why_in?: Maybe<String[] | String>;
  why_not_in?: Maybe<String[] | String>;
  why_lt?: Maybe<String>;
  why_lte?: Maybe<String>;
  why_gt?: Maybe<String>;
  why_gte?: Maybe<String>;
  why_contains?: Maybe<String>;
  why_not_contains?: Maybe<String>;
  why_starts_with?: Maybe<String>;
  why_not_starts_with?: Maybe<String>;
  why_ends_with?: Maybe<String>;
  why_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ReportWhereInput[] | ReportWhereInput>;
  OR?: Maybe<ReportWhereInput[] | ReportWhereInput>;
  NOT?: Maybe<ReportWhereInput[] | ReportWhereInput>;
}

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SuggestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SuggestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SuggestionWhereInput[] | SuggestionWhereInput>;
  OR?: Maybe<SuggestionWhereInput[] | SuggestionWhereInput>;
  NOT?: Maybe<SuggestionWhereInput[] | SuggestionWhereInput>;
}

export type SuperCategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  nickName?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface BlackListCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
}

export interface BlackListUpdateInput {
  email?: Maybe<String>;
}

export interface BlackListUpdateManyMutationInput {
  email?: Maybe<String>;
}

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  categoryName: String;
  product?: Maybe<ProductCreateManyWithoutCategoryInput>;
  superCategory?: Maybe<SuperCategoryCreateOneWithoutCategoryInput>;
}

export interface ProductCreateManyWithoutCategoryInput {
  create?: Maybe<
    ProductCreateWithoutCategoryInput[] | ProductCreateWithoutCategoryInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutCategoryInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutMyProductInput>;
  productName: String;
  reviews?: Maybe<ReviewCreateManyWithoutProductInput>;
  productPhoto?: Maybe<PhotoCreateOneWithoutProductInput>;
  isPublished?: Maybe<Boolean>;
  requestInfo: String;
}

export interface UserCreateOneWithoutMyProductInput {
  create?: Maybe<UserCreateWithoutMyProductInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMyProductInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickName: String;
  phone?: Maybe<String>;
  email: String;
  keyword?: Maybe<KeywordCreateManyInput>;
  password: String;
  myReview?: Maybe<ReviewCreateManyWithoutUserInput>;
  myComment?: Maybe<CommentCreateManyWithoutUserInput>;
  myLike?: Maybe<LikeCreateManyWithoutUserInput>;
  myHate?: Maybe<HateCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface KeywordCreateManyInput {
  create?: Maybe<KeywordCreateInput[] | KeywordCreateInput>;
  connect?: Maybe<KeywordWhereUniqueInput[] | KeywordWhereUniqueInput>;
}

export interface KeywordCreateInput {
  id?: Maybe<ID_Input>;
  search: String;
  count?: Maybe<Int>;
}

export interface ReviewCreateManyWithoutUserInput {
  create?: Maybe<ReviewCreateWithoutUserInput[] | ReviewCreateWithoutUserInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  text: String;
  rating: Float;
  product?: Maybe<ProductCreateOneWithoutReviewsInput>;
  comments?: Maybe<CommentCreateManyWithoutReviewInput>;
  likes?: Maybe<LikeCreateManyWithoutReviewInput>;
  hates?: Maybe<HateCreateManyWithoutReviewInput>;
  reviewPhotos?: Maybe<PhotoCreateManyWithoutReviewInput>;
}

export interface ProductCreateOneWithoutReviewsInput {
  create?: Maybe<ProductCreateWithoutReviewsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutReviewsInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutMyProductInput>;
  productName: String;
  category?: Maybe<CategoryCreateManyWithoutProductInput>;
  productPhoto?: Maybe<PhotoCreateOneWithoutProductInput>;
  isPublished?: Maybe<Boolean>;
  requestInfo: String;
}

export interface CategoryCreateManyWithoutProductInput {
  create?: Maybe<
    CategoryCreateWithoutProductInput[] | CategoryCreateWithoutProductInput
  >;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface CategoryCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  categoryName: String;
  superCategory?: Maybe<SuperCategoryCreateOneWithoutCategoryInput>;
}

export interface SuperCategoryCreateOneWithoutCategoryInput {
  create?: Maybe<SuperCategoryCreateWithoutCategoryInput>;
  connect?: Maybe<SuperCategoryWhereUniqueInput>;
}

export interface SuperCategoryCreateWithoutCategoryInput {
  id?: Maybe<ID_Input>;
  superCategoryName: String;
}

export interface PhotoCreateOneWithoutProductInput {
  create?: Maybe<PhotoCreateWithoutProductInput>;
  connect?: Maybe<PhotoWhereUniqueInput>;
}

export interface PhotoCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  url: String;
  review?: Maybe<ReviewCreateOneWithoutReviewPhotosInput>;
}

export interface ReviewCreateOneWithoutReviewPhotosInput {
  create?: Maybe<ReviewCreateWithoutReviewPhotosInput>;
  connect?: Maybe<ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutReviewPhotosInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMyReviewInput;
  title?: Maybe<String>;
  text: String;
  rating: Float;
  product?: Maybe<ProductCreateOneWithoutReviewsInput>;
  comments?: Maybe<CommentCreateManyWithoutReviewInput>;
  likes?: Maybe<LikeCreateManyWithoutReviewInput>;
  hates?: Maybe<HateCreateManyWithoutReviewInput>;
}

export interface UserCreateOneWithoutMyReviewInput {
  create?: Maybe<UserCreateWithoutMyReviewInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMyReviewInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickName: String;
  phone?: Maybe<String>;
  email: String;
  keyword?: Maybe<KeywordCreateManyInput>;
  password: String;
  myProduct?: Maybe<ProductCreateManyWithoutUserInput>;
  myComment?: Maybe<CommentCreateManyWithoutUserInput>;
  myLike?: Maybe<LikeCreateManyWithoutUserInput>;
  myHate?: Maybe<HateCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface ProductCreateManyWithoutUserInput {
  create?: Maybe<
    ProductCreateWithoutUserInput[] | ProductCreateWithoutUserInput
  >;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  productName: String;
  category?: Maybe<CategoryCreateManyWithoutProductInput>;
  reviews?: Maybe<ReviewCreateManyWithoutProductInput>;
  productPhoto?: Maybe<PhotoCreateOneWithoutProductInput>;
  isPublished?: Maybe<Boolean>;
  requestInfo: String;
}

export interface ReviewCreateManyWithoutProductInput {
  create?: Maybe<
    ReviewCreateWithoutProductInput[] | ReviewCreateWithoutProductInput
  >;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMyReviewInput;
  title?: Maybe<String>;
  text: String;
  rating: Float;
  comments?: Maybe<CommentCreateManyWithoutReviewInput>;
  likes?: Maybe<LikeCreateManyWithoutReviewInput>;
  hates?: Maybe<HateCreateManyWithoutReviewInput>;
  reviewPhotos?: Maybe<PhotoCreateManyWithoutReviewInput>;
}

export interface CommentCreateManyWithoutReviewInput {
  create?: Maybe<
    CommentCreateWithoutReviewInput[] | CommentCreateWithoutReviewInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutReviewInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMyCommentInput;
  text: String;
}

export interface UserCreateOneWithoutMyCommentInput {
  create?: Maybe<UserCreateWithoutMyCommentInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMyCommentInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickName: String;
  phone?: Maybe<String>;
  email: String;
  keyword?: Maybe<KeywordCreateManyInput>;
  password: String;
  myReview?: Maybe<ReviewCreateManyWithoutUserInput>;
  myProduct?: Maybe<ProductCreateManyWithoutUserInput>;
  myLike?: Maybe<LikeCreateManyWithoutUserInput>;
  myHate?: Maybe<HateCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface LikeCreateManyWithoutUserInput {
  create?: Maybe<LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
}

export interface LikeCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  review?: Maybe<ReviewCreateOneWithoutLikesInput>;
}

export interface ReviewCreateOneWithoutLikesInput {
  create?: Maybe<ReviewCreateWithoutLikesInput>;
  connect?: Maybe<ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutLikesInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMyReviewInput;
  title?: Maybe<String>;
  text: String;
  rating: Float;
  product?: Maybe<ProductCreateOneWithoutReviewsInput>;
  comments?: Maybe<CommentCreateManyWithoutReviewInput>;
  hates?: Maybe<HateCreateManyWithoutReviewInput>;
  reviewPhotos?: Maybe<PhotoCreateManyWithoutReviewInput>;
}

export interface HateCreateManyWithoutReviewInput {
  create?: Maybe<HateCreateWithoutReviewInput[] | HateCreateWithoutReviewInput>;
  connect?: Maybe<HateWhereUniqueInput[] | HateWhereUniqueInput>;
}

export interface HateCreateWithoutReviewInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutMyHateInput>;
}

export interface UserCreateOneWithoutMyHateInput {
  create?: Maybe<UserCreateWithoutMyHateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMyHateInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickName: String;
  phone?: Maybe<String>;
  email: String;
  keyword?: Maybe<KeywordCreateManyInput>;
  password: String;
  myReview?: Maybe<ReviewCreateManyWithoutUserInput>;
  myProduct?: Maybe<ProductCreateManyWithoutUserInput>;
  myComment?: Maybe<CommentCreateManyWithoutUserInput>;
  myLike?: Maybe<LikeCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface CommentCreateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  review: ReviewCreateOneWithoutCommentsInput;
  text: String;
}

export interface ReviewCreateOneWithoutCommentsInput {
  create?: Maybe<ReviewCreateWithoutCommentsInput>;
  connect?: Maybe<ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMyReviewInput;
  title?: Maybe<String>;
  text: String;
  rating: Float;
  product?: Maybe<ProductCreateOneWithoutReviewsInput>;
  likes?: Maybe<LikeCreateManyWithoutReviewInput>;
  hates?: Maybe<HateCreateManyWithoutReviewInput>;
  reviewPhotos?: Maybe<PhotoCreateManyWithoutReviewInput>;
}

export interface LikeCreateManyWithoutReviewInput {
  create?: Maybe<LikeCreateWithoutReviewInput[] | LikeCreateWithoutReviewInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
}

export interface LikeCreateWithoutReviewInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutMyLikeInput>;
}

export interface UserCreateOneWithoutMyLikeInput {
  create?: Maybe<UserCreateWithoutMyLikeInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMyLikeInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickName: String;
  phone?: Maybe<String>;
  email: String;
  keyword?: Maybe<KeywordCreateManyInput>;
  password: String;
  myReview?: Maybe<ReviewCreateManyWithoutUserInput>;
  myProduct?: Maybe<ProductCreateManyWithoutUserInput>;
  myComment?: Maybe<CommentCreateManyWithoutUserInput>;
  myHate?: Maybe<HateCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface HateCreateManyWithoutUserInput {
  create?: Maybe<HateCreateWithoutUserInput[] | HateCreateWithoutUserInput>;
  connect?: Maybe<HateWhereUniqueInput[] | HateWhereUniqueInput>;
}

export interface HateCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  review?: Maybe<ReviewCreateOneWithoutHatesInput>;
}

export interface ReviewCreateOneWithoutHatesInput {
  create?: Maybe<ReviewCreateWithoutHatesInput>;
  connect?: Maybe<ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutHatesInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMyReviewInput;
  title?: Maybe<String>;
  text: String;
  rating: Float;
  product?: Maybe<ProductCreateOneWithoutReviewsInput>;
  comments?: Maybe<CommentCreateManyWithoutReviewInput>;
  likes?: Maybe<LikeCreateManyWithoutReviewInput>;
  reviewPhotos?: Maybe<PhotoCreateManyWithoutReviewInput>;
}

export interface PhotoCreateManyWithoutReviewInput {
  create?: Maybe<
    PhotoCreateWithoutReviewInput[] | PhotoCreateWithoutReviewInput
  >;
  connect?: Maybe<PhotoWhereUniqueInput[] | PhotoWhereUniqueInput>;
}

export interface PhotoCreateWithoutReviewInput {
  id?: Maybe<ID_Input>;
  url: String;
  product?: Maybe<ProductCreateOneWithoutProductPhotoInput>;
}

export interface ProductCreateOneWithoutProductPhotoInput {
  create?: Maybe<ProductCreateWithoutProductPhotoInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutProductPhotoInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutMyProductInput>;
  productName: String;
  category?: Maybe<CategoryCreateManyWithoutProductInput>;
  reviews?: Maybe<ReviewCreateManyWithoutProductInput>;
  isPublished?: Maybe<Boolean>;
  requestInfo: String;
}

export interface CategoryUpdateInput {
  categoryName?: Maybe<String>;
  product?: Maybe<ProductUpdateManyWithoutCategoryInput>;
  superCategory?: Maybe<SuperCategoryUpdateOneWithoutCategoryInput>;
}

export interface ProductUpdateManyWithoutCategoryInput {
  create?: Maybe<
    ProductCreateWithoutCategoryInput[] | ProductCreateWithoutCategoryInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    | ProductUpdateWithWhereUniqueWithoutCategoryInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    | ProductUpsertWithWhereUniqueWithoutCategoryInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutCategoryDataInput;
}

export interface ProductUpdateWithoutCategoryDataInput {
  user?: Maybe<UserUpdateOneWithoutMyProductInput>;
  productName?: Maybe<String>;
  reviews?: Maybe<ReviewUpdateManyWithoutProductInput>;
  productPhoto?: Maybe<PhotoUpdateOneWithoutProductInput>;
  isPublished?: Maybe<Boolean>;
  requestInfo?: Maybe<String>;
}

export interface UserUpdateOneWithoutMyProductInput {
  create?: Maybe<UserCreateWithoutMyProductInput>;
  update?: Maybe<UserUpdateWithoutMyProductDataInput>;
  upsert?: Maybe<UserUpsertWithoutMyProductInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMyProductDataInput {
  avatar?: Maybe<String>;
  nickName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  keyword?: Maybe<KeywordUpdateManyInput>;
  password?: Maybe<String>;
  myReview?: Maybe<ReviewUpdateManyWithoutUserInput>;
  myComment?: Maybe<CommentUpdateManyWithoutUserInput>;
  myLike?: Maybe<LikeUpdateManyWithoutUserInput>;
  myHate?: Maybe<HateUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface KeywordUpdateManyInput {
  create?: Maybe<KeywordCreateInput[] | KeywordCreateInput>;
  update?: Maybe<
    | KeywordUpdateWithWhereUniqueNestedInput[]
    | KeywordUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | KeywordUpsertWithWhereUniqueNestedInput[]
    | KeywordUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<KeywordWhereUniqueInput[] | KeywordWhereUniqueInput>;
  connect?: Maybe<KeywordWhereUniqueInput[] | KeywordWhereUniqueInput>;
  set?: Maybe<KeywordWhereUniqueInput[] | KeywordWhereUniqueInput>;
  disconnect?: Maybe<KeywordWhereUniqueInput[] | KeywordWhereUniqueInput>;
  deleteMany?: Maybe<KeywordScalarWhereInput[] | KeywordScalarWhereInput>;
  updateMany?: Maybe<
    | KeywordUpdateManyWithWhereNestedInput[]
    | KeywordUpdateManyWithWhereNestedInput
  >;
}

export interface KeywordUpdateWithWhereUniqueNestedInput {
  where: KeywordWhereUniqueInput;
  data: KeywordUpdateDataInput;
}

export interface KeywordUpdateDataInput {
  search?: Maybe<String>;
  count?: Maybe<Int>;
}

export interface KeywordUpsertWithWhereUniqueNestedInput {
  where: KeywordWhereUniqueInput;
  update: KeywordUpdateDataInput;
  create: KeywordCreateInput;
}

export interface KeywordScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  search?: Maybe<String>;
  search_not?: Maybe<String>;
  search_in?: Maybe<String[] | String>;
  search_not_in?: Maybe<String[] | String>;
  search_lt?: Maybe<String>;
  search_lte?: Maybe<String>;
  search_gt?: Maybe<String>;
  search_gte?: Maybe<String>;
  search_contains?: Maybe<String>;
  search_not_contains?: Maybe<String>;
  search_starts_with?: Maybe<String>;
  search_not_starts_with?: Maybe<String>;
  search_ends_with?: Maybe<String>;
  search_not_ends_with?: Maybe<String>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<KeywordScalarWhereInput[] | KeywordScalarWhereInput>;
  OR?: Maybe<KeywordScalarWhereInput[] | KeywordScalarWhereInput>;
  NOT?: Maybe<KeywordScalarWhereInput[] | KeywordScalarWhereInput>;
}

export interface KeywordUpdateManyWithWhereNestedInput {
  where: KeywordScalarWhereInput;
  data: KeywordUpdateManyDataInput;
}

export interface KeywordUpdateManyDataInput {
  search?: Maybe<String>;
  count?: Maybe<Int>;
}

export interface ReviewUpdateManyWithoutUserInput {
  create?: Maybe<ReviewCreateWithoutUserInput[] | ReviewCreateWithoutUserInput>;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    | ReviewUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    | ReviewUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutUserDataInput;
}

export interface ReviewUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
  rating?: Maybe<Float>;
  product?: Maybe<ProductUpdateOneWithoutReviewsInput>;
  comments?: Maybe<CommentUpdateManyWithoutReviewInput>;
  likes?: Maybe<LikeUpdateManyWithoutReviewInput>;
  hates?: Maybe<HateUpdateManyWithoutReviewInput>;
  reviewPhotos?: Maybe<PhotoUpdateManyWithoutReviewInput>;
}

export interface ProductUpdateOneWithoutReviewsInput {
  create?: Maybe<ProductCreateWithoutReviewsInput>;
  update?: Maybe<ProductUpdateWithoutReviewsDataInput>;
  upsert?: Maybe<ProductUpsertWithoutReviewsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateWithoutReviewsDataInput {
  user?: Maybe<UserUpdateOneWithoutMyProductInput>;
  productName?: Maybe<String>;
  category?: Maybe<CategoryUpdateManyWithoutProductInput>;
  productPhoto?: Maybe<PhotoUpdateOneWithoutProductInput>;
  isPublished?: Maybe<Boolean>;
  requestInfo?: Maybe<String>;
}

export interface CategoryUpdateManyWithoutProductInput {
  create?: Maybe<
    CategoryCreateWithoutProductInput[] | CategoryCreateWithoutProductInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueWithoutProductInput[]
    | CategoryUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueWithoutProductInput[]
    | CategoryUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface CategoryUpdateWithWhereUniqueWithoutProductInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutProductDataInput;
}

export interface CategoryUpdateWithoutProductDataInput {
  categoryName?: Maybe<String>;
  superCategory?: Maybe<SuperCategoryUpdateOneWithoutCategoryInput>;
}

export interface SuperCategoryUpdateOneWithoutCategoryInput {
  create?: Maybe<SuperCategoryCreateWithoutCategoryInput>;
  update?: Maybe<SuperCategoryUpdateWithoutCategoryDataInput>;
  upsert?: Maybe<SuperCategoryUpsertWithoutCategoryInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SuperCategoryWhereUniqueInput>;
}

export interface SuperCategoryUpdateWithoutCategoryDataInput {
  superCategoryName?: Maybe<String>;
}

export interface SuperCategoryUpsertWithoutCategoryInput {
  update: SuperCategoryUpdateWithoutCategoryDataInput;
  create: SuperCategoryCreateWithoutCategoryInput;
}

export interface CategoryUpsertWithWhereUniqueWithoutProductInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutProductDataInput;
  create: CategoryCreateWithoutProductInput;
}

export interface CategoryScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  categoryName?: Maybe<String>;
  categoryName_not?: Maybe<String>;
  categoryName_in?: Maybe<String[] | String>;
  categoryName_not_in?: Maybe<String[] | String>;
  categoryName_lt?: Maybe<String>;
  categoryName_lte?: Maybe<String>;
  categoryName_gt?: Maybe<String>;
  categoryName_gte?: Maybe<String>;
  categoryName_contains?: Maybe<String>;
  categoryName_not_contains?: Maybe<String>;
  categoryName_starts_with?: Maybe<String>;
  categoryName_not_starts_with?: Maybe<String>;
  categoryName_ends_with?: Maybe<String>;
  categoryName_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  OR?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  NOT?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
}

export interface CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput;
  data: CategoryUpdateManyDataInput;
}

export interface CategoryUpdateManyDataInput {
  categoryName?: Maybe<String>;
}

export interface PhotoUpdateOneWithoutProductInput {
  create?: Maybe<PhotoCreateWithoutProductInput>;
  update?: Maybe<PhotoUpdateWithoutProductDataInput>;
  upsert?: Maybe<PhotoUpsertWithoutProductInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PhotoWhereUniqueInput>;
}

export interface PhotoUpdateWithoutProductDataInput {
  url?: Maybe<String>;
  review?: Maybe<ReviewUpdateOneWithoutReviewPhotosInput>;
}

export interface ReviewUpdateOneWithoutReviewPhotosInput {
  create?: Maybe<ReviewCreateWithoutReviewPhotosInput>;
  update?: Maybe<ReviewUpdateWithoutReviewPhotosDataInput>;
  upsert?: Maybe<ReviewUpsertWithoutReviewPhotosInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ReviewWhereUniqueInput>;
}

export interface ReviewUpdateWithoutReviewPhotosDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMyReviewInput>;
  title?: Maybe<String>;
  text?: Maybe<String>;
  rating?: Maybe<Float>;
  product?: Maybe<ProductUpdateOneWithoutReviewsInput>;
  comments?: Maybe<CommentUpdateManyWithoutReviewInput>;
  likes?: Maybe<LikeUpdateManyWithoutReviewInput>;
  hates?: Maybe<HateUpdateManyWithoutReviewInput>;
}

export interface UserUpdateOneRequiredWithoutMyReviewInput {
  create?: Maybe<UserCreateWithoutMyReviewInput>;
  update?: Maybe<UserUpdateWithoutMyReviewDataInput>;
  upsert?: Maybe<UserUpsertWithoutMyReviewInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMyReviewDataInput {
  avatar?: Maybe<String>;
  nickName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  keyword?: Maybe<KeywordUpdateManyInput>;
  password?: Maybe<String>;
  myProduct?: Maybe<ProductUpdateManyWithoutUserInput>;
  myComment?: Maybe<CommentUpdateManyWithoutUserInput>;
  myLike?: Maybe<LikeUpdateManyWithoutUserInput>;
  myHate?: Maybe<HateUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface ProductUpdateManyWithoutUserInput {
  create?: Maybe<
    ProductCreateWithoutUserInput[] | ProductCreateWithoutUserInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueWithoutUserInput[]
    | ProductUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueWithoutUserInput[]
    | ProductUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateWithWhereUniqueWithoutUserInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutUserDataInput;
}

export interface ProductUpdateWithoutUserDataInput {
  productName?: Maybe<String>;
  category?: Maybe<CategoryUpdateManyWithoutProductInput>;
  reviews?: Maybe<ReviewUpdateManyWithoutProductInput>;
  productPhoto?: Maybe<PhotoUpdateOneWithoutProductInput>;
  isPublished?: Maybe<Boolean>;
  requestInfo?: Maybe<String>;
}

export interface ReviewUpdateManyWithoutProductInput {
  create?: Maybe<
    ReviewCreateWithoutProductInput[] | ReviewCreateWithoutProductInput
  >;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutProductInput[]
    | ReviewUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutProductInput[]
    | ReviewUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateWithWhereUniqueWithoutProductInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutProductDataInput;
}

export interface ReviewUpdateWithoutProductDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMyReviewInput>;
  title?: Maybe<String>;
  text?: Maybe<String>;
  rating?: Maybe<Float>;
  comments?: Maybe<CommentUpdateManyWithoutReviewInput>;
  likes?: Maybe<LikeUpdateManyWithoutReviewInput>;
  hates?: Maybe<HateUpdateManyWithoutReviewInput>;
  reviewPhotos?: Maybe<PhotoUpdateManyWithoutReviewInput>;
}

export interface CommentUpdateManyWithoutReviewInput {
  create?: Maybe<
    CommentCreateWithoutReviewInput[] | CommentCreateWithoutReviewInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutReviewInput[]
    | CommentUpdateWithWhereUniqueWithoutReviewInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutReviewInput[]
    | CommentUpsertWithWhereUniqueWithoutReviewInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutReviewInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutReviewDataInput;
}

export interface CommentUpdateWithoutReviewDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMyCommentInput>;
  text?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutMyCommentInput {
  create?: Maybe<UserCreateWithoutMyCommentInput>;
  update?: Maybe<UserUpdateWithoutMyCommentDataInput>;
  upsert?: Maybe<UserUpsertWithoutMyCommentInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMyCommentDataInput {
  avatar?: Maybe<String>;
  nickName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  keyword?: Maybe<KeywordUpdateManyInput>;
  password?: Maybe<String>;
  myReview?: Maybe<ReviewUpdateManyWithoutUserInput>;
  myProduct?: Maybe<ProductUpdateManyWithoutUserInput>;
  myLike?: Maybe<LikeUpdateManyWithoutUserInput>;
  myHate?: Maybe<HateUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface LikeUpdateManyWithoutUserInput {
  create?: Maybe<LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput>;
  delete?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  set?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  disconnect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  update?: Maybe<
    | LikeUpdateWithWhereUniqueWithoutUserInput[]
    | LikeUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | LikeUpsertWithWhereUniqueWithoutUserInput[]
    | LikeUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutUserDataInput;
}

export interface LikeUpdateWithoutUserDataInput {
  review?: Maybe<ReviewUpdateOneWithoutLikesInput>;
}

export interface ReviewUpdateOneWithoutLikesInput {
  create?: Maybe<ReviewCreateWithoutLikesInput>;
  update?: Maybe<ReviewUpdateWithoutLikesDataInput>;
  upsert?: Maybe<ReviewUpsertWithoutLikesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ReviewWhereUniqueInput>;
}

export interface ReviewUpdateWithoutLikesDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMyReviewInput>;
  title?: Maybe<String>;
  text?: Maybe<String>;
  rating?: Maybe<Float>;
  product?: Maybe<ProductUpdateOneWithoutReviewsInput>;
  comments?: Maybe<CommentUpdateManyWithoutReviewInput>;
  hates?: Maybe<HateUpdateManyWithoutReviewInput>;
  reviewPhotos?: Maybe<PhotoUpdateManyWithoutReviewInput>;
}

export interface HateUpdateManyWithoutReviewInput {
  create?: Maybe<HateCreateWithoutReviewInput[] | HateCreateWithoutReviewInput>;
  delete?: Maybe<HateWhereUniqueInput[] | HateWhereUniqueInput>;
  connect?: Maybe<HateWhereUniqueInput[] | HateWhereUniqueInput>;
  set?: Maybe<HateWhereUniqueInput[] | HateWhereUniqueInput>;
  disconnect?: Maybe<HateWhereUniqueInput[] | HateWhereUniqueInput>;
  update?: Maybe<
    | HateUpdateWithWhereUniqueWithoutReviewInput[]
    | HateUpdateWithWhereUniqueWithoutReviewInput
  >;
  upsert?: Maybe<
    | HateUpsertWithWhereUniqueWithoutReviewInput[]
    | HateUpsertWithWhereUniqueWithoutReviewInput
  >;
  deleteMany?: Maybe<HateScalarWhereInput[] | HateScalarWhereInput>;
}

export interface HateUpdateWithWhereUniqueWithoutReviewInput {
  where: HateWhereUniqueInput;
  data: HateUpdateWithoutReviewDataInput;
}

export interface HateUpdateWithoutReviewDataInput {
  user?: Maybe<UserUpdateOneWithoutMyHateInput>;
}

export interface UserUpdateOneWithoutMyHateInput {
  create?: Maybe<UserCreateWithoutMyHateInput>;
  update?: Maybe<UserUpdateWithoutMyHateDataInput>;
  upsert?: Maybe<UserUpsertWithoutMyHateInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMyHateDataInput {
  avatar?: Maybe<String>;
  nickName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  keyword?: Maybe<KeywordUpdateManyInput>;
  password?: Maybe<String>;
  myReview?: Maybe<ReviewUpdateManyWithoutUserInput>;
  myProduct?: Maybe<ProductUpdateManyWithoutUserInput>;
  myComment?: Maybe<CommentUpdateManyWithoutUserInput>;
  myLike?: Maybe<LikeUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface CommentUpdateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutUserInput[]
    | CommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutUserInput[]
    | CommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutUserDataInput;
}

export interface CommentUpdateWithoutUserDataInput {
  review?: Maybe<ReviewUpdateOneRequiredWithoutCommentsInput>;
  text?: Maybe<String>;
}

export interface ReviewUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<ReviewCreateWithoutCommentsInput>;
  update?: Maybe<ReviewUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<ReviewUpsertWithoutCommentsInput>;
  connect?: Maybe<ReviewWhereUniqueInput>;
}

export interface ReviewUpdateWithoutCommentsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMyReviewInput>;
  title?: Maybe<String>;
  text?: Maybe<String>;
  rating?: Maybe<Float>;
  product?: Maybe<ProductUpdateOneWithoutReviewsInput>;
  likes?: Maybe<LikeUpdateManyWithoutReviewInput>;
  hates?: Maybe<HateUpdateManyWithoutReviewInput>;
  reviewPhotos?: Maybe<PhotoUpdateManyWithoutReviewInput>;
}

export interface LikeUpdateManyWithoutReviewInput {
  create?: Maybe<LikeCreateWithoutReviewInput[] | LikeCreateWithoutReviewInput>;
  delete?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  set?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  disconnect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  update?: Maybe<
    | LikeUpdateWithWhereUniqueWithoutReviewInput[]
    | LikeUpdateWithWhereUniqueWithoutReviewInput
  >;
  upsert?: Maybe<
    | LikeUpsertWithWhereUniqueWithoutReviewInput[]
    | LikeUpsertWithWhereUniqueWithoutReviewInput
  >;
  deleteMany?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface LikeUpdateWithWhereUniqueWithoutReviewInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutReviewDataInput;
}

export interface LikeUpdateWithoutReviewDataInput {
  user?: Maybe<UserUpdateOneWithoutMyLikeInput>;
}

export interface UserUpdateOneWithoutMyLikeInput {
  create?: Maybe<UserCreateWithoutMyLikeInput>;
  update?: Maybe<UserUpdateWithoutMyLikeDataInput>;
  upsert?: Maybe<UserUpsertWithoutMyLikeInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMyLikeDataInput {
  avatar?: Maybe<String>;
  nickName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  keyword?: Maybe<KeywordUpdateManyInput>;
  password?: Maybe<String>;
  myReview?: Maybe<ReviewUpdateManyWithoutUserInput>;
  myProduct?: Maybe<ProductUpdateManyWithoutUserInput>;
  myComment?: Maybe<CommentUpdateManyWithoutUserInput>;
  myHate?: Maybe<HateUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface HateUpdateManyWithoutUserInput {
  create?: Maybe<HateCreateWithoutUserInput[] | HateCreateWithoutUserInput>;
  delete?: Maybe<HateWhereUniqueInput[] | HateWhereUniqueInput>;
  connect?: Maybe<HateWhereUniqueInput[] | HateWhereUniqueInput>;
  set?: Maybe<HateWhereUniqueInput[] | HateWhereUniqueInput>;
  disconnect?: Maybe<HateWhereUniqueInput[] | HateWhereUniqueInput>;
  update?: Maybe<
    | HateUpdateWithWhereUniqueWithoutUserInput[]
    | HateUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | HateUpsertWithWhereUniqueWithoutUserInput[]
    | HateUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<HateScalarWhereInput[] | HateScalarWhereInput>;
}

export interface HateUpdateWithWhereUniqueWithoutUserInput {
  where: HateWhereUniqueInput;
  data: HateUpdateWithoutUserDataInput;
}

export interface HateUpdateWithoutUserDataInput {
  review?: Maybe<ReviewUpdateOneWithoutHatesInput>;
}

export interface ReviewUpdateOneWithoutHatesInput {
  create?: Maybe<ReviewCreateWithoutHatesInput>;
  update?: Maybe<ReviewUpdateWithoutHatesDataInput>;
  upsert?: Maybe<ReviewUpsertWithoutHatesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ReviewWhereUniqueInput>;
}

export interface ReviewUpdateWithoutHatesDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMyReviewInput>;
  title?: Maybe<String>;
  text?: Maybe<String>;
  rating?: Maybe<Float>;
  product?: Maybe<ProductUpdateOneWithoutReviewsInput>;
  comments?: Maybe<CommentUpdateManyWithoutReviewInput>;
  likes?: Maybe<LikeUpdateManyWithoutReviewInput>;
  reviewPhotos?: Maybe<PhotoUpdateManyWithoutReviewInput>;
}

export interface PhotoUpdateManyWithoutReviewInput {
  create?: Maybe<
    PhotoCreateWithoutReviewInput[] | PhotoCreateWithoutReviewInput
  >;
  delete?: Maybe<PhotoWhereUniqueInput[] | PhotoWhereUniqueInput>;
  connect?: Maybe<PhotoWhereUniqueInput[] | PhotoWhereUniqueInput>;
  set?: Maybe<PhotoWhereUniqueInput[] | PhotoWhereUniqueInput>;
  disconnect?: Maybe<PhotoWhereUniqueInput[] | PhotoWhereUniqueInput>;
  update?: Maybe<
    | PhotoUpdateWithWhereUniqueWithoutReviewInput[]
    | PhotoUpdateWithWhereUniqueWithoutReviewInput
  >;
  upsert?: Maybe<
    | PhotoUpsertWithWhereUniqueWithoutReviewInput[]
    | PhotoUpsertWithWhereUniqueWithoutReviewInput
  >;
  deleteMany?: Maybe<PhotoScalarWhereInput[] | PhotoScalarWhereInput>;
  updateMany?: Maybe<
    PhotoUpdateManyWithWhereNestedInput[] | PhotoUpdateManyWithWhereNestedInput
  >;
}

export interface PhotoUpdateWithWhereUniqueWithoutReviewInput {
  where: PhotoWhereUniqueInput;
  data: PhotoUpdateWithoutReviewDataInput;
}

export interface PhotoUpdateWithoutReviewDataInput {
  url?: Maybe<String>;
  product?: Maybe<ProductUpdateOneWithoutProductPhotoInput>;
}

export interface ProductUpdateOneWithoutProductPhotoInput {
  create?: Maybe<ProductCreateWithoutProductPhotoInput>;
  update?: Maybe<ProductUpdateWithoutProductPhotoDataInput>;
  upsert?: Maybe<ProductUpsertWithoutProductPhotoInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateWithoutProductPhotoDataInput {
  user?: Maybe<UserUpdateOneWithoutMyProductInput>;
  productName?: Maybe<String>;
  category?: Maybe<CategoryUpdateManyWithoutProductInput>;
  reviews?: Maybe<ReviewUpdateManyWithoutProductInput>;
  isPublished?: Maybe<Boolean>;
  requestInfo?: Maybe<String>;
}

export interface ProductUpsertWithoutProductPhotoInput {
  update: ProductUpdateWithoutProductPhotoDataInput;
  create: ProductCreateWithoutProductPhotoInput;
}

export interface PhotoUpsertWithWhereUniqueWithoutReviewInput {
  where: PhotoWhereUniqueInput;
  update: PhotoUpdateWithoutReviewDataInput;
  create: PhotoCreateWithoutReviewInput;
}

export interface PhotoScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PhotoScalarWhereInput[] | PhotoScalarWhereInput>;
  OR?: Maybe<PhotoScalarWhereInput[] | PhotoScalarWhereInput>;
  NOT?: Maybe<PhotoScalarWhereInput[] | PhotoScalarWhereInput>;
}

export interface PhotoUpdateManyWithWhereNestedInput {
  where: PhotoScalarWhereInput;
  data: PhotoUpdateManyDataInput;
}

export interface PhotoUpdateManyDataInput {
  url?: Maybe<String>;
}

export interface ReviewUpsertWithoutHatesInput {
  update: ReviewUpdateWithoutHatesDataInput;
  create: ReviewCreateWithoutHatesInput;
}

export interface HateUpsertWithWhereUniqueWithoutUserInput {
  where: HateWhereUniqueInput;
  update: HateUpdateWithoutUserDataInput;
  create: HateCreateWithoutUserInput;
}

export interface HateScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<HateScalarWhereInput[] | HateScalarWhereInput>;
  OR?: Maybe<HateScalarWhereInput[] | HateScalarWhereInput>;
  NOT?: Maybe<HateScalarWhereInput[] | HateScalarWhereInput>;
}

export interface UserUpsertWithoutMyLikeInput {
  update: UserUpdateWithoutMyLikeDataInput;
  create: UserCreateWithoutMyLikeInput;
}

export interface LikeUpsertWithWhereUniqueWithoutReviewInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutReviewDataInput;
  create: LikeCreateWithoutReviewInput;
}

export interface LikeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  OR?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  NOT?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface ReviewUpsertWithoutCommentsInput {
  update: ReviewUpdateWithoutCommentsDataInput;
  create: ReviewCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutUserDataInput;
  create: CommentCreateWithoutUserInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface UserUpsertWithoutMyHateInput {
  update: UserUpdateWithoutMyHateDataInput;
  create: UserCreateWithoutMyHateInput;
}

export interface HateUpsertWithWhereUniqueWithoutReviewInput {
  where: HateWhereUniqueInput;
  update: HateUpdateWithoutReviewDataInput;
  create: HateCreateWithoutReviewInput;
}

export interface ReviewUpsertWithoutLikesInput {
  update: ReviewUpdateWithoutLikesDataInput;
  create: ReviewCreateWithoutLikesInput;
}

export interface LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutUserDataInput;
  create: LikeCreateWithoutUserInput;
}

export interface UserUpsertWithoutMyCommentInput {
  update: UserUpdateWithoutMyCommentDataInput;
  create: UserCreateWithoutMyCommentInput;
}

export interface CommentUpsertWithWhereUniqueWithoutReviewInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutReviewDataInput;
  create: CommentCreateWithoutReviewInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutProductInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutProductDataInput;
  create: ReviewCreateWithoutProductInput;
}

export interface ReviewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  rating?: Maybe<Float>;
  rating_not?: Maybe<Float>;
  rating_in?: Maybe<Float[] | Float>;
  rating_not_in?: Maybe<Float[] | Float>;
  rating_lt?: Maybe<Float>;
  rating_lte?: Maybe<Float>;
  rating_gt?: Maybe<Float>;
  rating_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  OR?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  NOT?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
}

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export interface ReviewUpdateManyDataInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
  rating?: Maybe<Float>;
}

export interface ProductUpsertWithWhereUniqueWithoutUserInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutUserDataInput;
  create: ProductCreateWithoutUserInput;
}

export interface ProductScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  productName?: Maybe<String>;
  productName_not?: Maybe<String>;
  productName_in?: Maybe<String[] | String>;
  productName_not_in?: Maybe<String[] | String>;
  productName_lt?: Maybe<String>;
  productName_lte?: Maybe<String>;
  productName_gt?: Maybe<String>;
  productName_gte?: Maybe<String>;
  productName_contains?: Maybe<String>;
  productName_not_contains?: Maybe<String>;
  productName_starts_with?: Maybe<String>;
  productName_not_starts_with?: Maybe<String>;
  productName_ends_with?: Maybe<String>;
  productName_not_ends_with?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  requestInfo?: Maybe<String>;
  requestInfo_not?: Maybe<String>;
  requestInfo_in?: Maybe<String[] | String>;
  requestInfo_not_in?: Maybe<String[] | String>;
  requestInfo_lt?: Maybe<String>;
  requestInfo_lte?: Maybe<String>;
  requestInfo_gt?: Maybe<String>;
  requestInfo_gte?: Maybe<String>;
  requestInfo_contains?: Maybe<String>;
  requestInfo_not_contains?: Maybe<String>;
  requestInfo_starts_with?: Maybe<String>;
  requestInfo_not_starts_with?: Maybe<String>;
  requestInfo_ends_with?: Maybe<String>;
  requestInfo_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  OR?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  NOT?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
}

export interface ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput;
  data: ProductUpdateManyDataInput;
}

export interface ProductUpdateManyDataInput {
  productName?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  requestInfo?: Maybe<String>;
}

export interface UserUpsertWithoutMyReviewInput {
  update: UserUpdateWithoutMyReviewDataInput;
  create: UserCreateWithoutMyReviewInput;
}

export interface ReviewUpsertWithoutReviewPhotosInput {
  update: ReviewUpdateWithoutReviewPhotosDataInput;
  create: ReviewCreateWithoutReviewPhotosInput;
}

export interface PhotoUpsertWithoutProductInput {
  update: PhotoUpdateWithoutProductDataInput;
  create: PhotoCreateWithoutProductInput;
}

export interface ProductUpsertWithoutReviewsInput {
  update: ProductUpdateWithoutReviewsDataInput;
  create: ProductCreateWithoutReviewsInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutUserInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutUserDataInput;
  create: ReviewCreateWithoutUserInput;
}

export interface UserUpsertWithoutMyProductInput {
  update: UserUpdateWithoutMyProductDataInput;
  create: UserCreateWithoutMyProductInput;
}

export interface ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutCategoryDataInput;
  create: ProductCreateWithoutCategoryInput;
}

export interface CategoryUpdateManyMutationInput {
  categoryName?: Maybe<String>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMyCommentInput;
  review: ReviewCreateOneWithoutCommentsInput;
  text: String;
}

export interface CommentUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMyCommentInput>;
  review?: Maybe<ReviewUpdateOneRequiredWithoutCommentsInput>;
  text?: Maybe<String>;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface HateCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutMyHateInput>;
  review?: Maybe<ReviewCreateOneWithoutHatesInput>;
}

export interface HateUpdateInput {
  user?: Maybe<UserUpdateOneWithoutMyHateInput>;
  review?: Maybe<ReviewUpdateOneWithoutHatesInput>;
}

export interface KeywordUpdateInput {
  search?: Maybe<String>;
  count?: Maybe<Int>;
}

export interface KeywordUpdateManyMutationInput {
  search?: Maybe<String>;
  count?: Maybe<Int>;
}

export interface LikeCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutMyLikeInput>;
  review?: Maybe<ReviewCreateOneWithoutLikesInput>;
}

export interface LikeUpdateInput {
  user?: Maybe<UserUpdateOneWithoutMyLikeInput>;
  review?: Maybe<ReviewUpdateOneWithoutLikesInput>;
}

export interface PhotoCreateInput {
  id?: Maybe<ID_Input>;
  url: String;
  review?: Maybe<ReviewCreateOneWithoutReviewPhotosInput>;
  product?: Maybe<ProductCreateOneWithoutProductPhotoInput>;
}

export interface PhotoUpdateInput {
  url?: Maybe<String>;
  review?: Maybe<ReviewUpdateOneWithoutReviewPhotosInput>;
  product?: Maybe<ProductUpdateOneWithoutProductPhotoInput>;
}

export interface PhotoUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutMyProductInput>;
  productName: String;
  category?: Maybe<CategoryCreateManyWithoutProductInput>;
  reviews?: Maybe<ReviewCreateManyWithoutProductInput>;
  productPhoto?: Maybe<PhotoCreateOneWithoutProductInput>;
  isPublished?: Maybe<Boolean>;
  requestInfo: String;
}

export interface ProductUpdateInput {
  user?: Maybe<UserUpdateOneWithoutMyProductInput>;
  productName?: Maybe<String>;
  category?: Maybe<CategoryUpdateManyWithoutProductInput>;
  reviews?: Maybe<ReviewUpdateManyWithoutProductInput>;
  productPhoto?: Maybe<PhotoUpdateOneWithoutProductInput>;
  isPublished?: Maybe<Boolean>;
  requestInfo?: Maybe<String>;
}

export interface ProductUpdateManyMutationInput {
  productName?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  requestInfo?: Maybe<String>;
}

export interface ReportCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  review?: Maybe<ReviewCreateOneInput>;
  comment?: Maybe<CommentCreateOneInput>;
  why: String;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickName: String;
  phone?: Maybe<String>;
  email: String;
  keyword?: Maybe<KeywordCreateManyInput>;
  password: String;
  myReview?: Maybe<ReviewCreateManyWithoutUserInput>;
  myProduct?: Maybe<ProductCreateManyWithoutUserInput>;
  myComment?: Maybe<CommentCreateManyWithoutUserInput>;
  myLike?: Maybe<LikeCreateManyWithoutUserInput>;
  myHate?: Maybe<HateCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface ReviewCreateOneInput {
  create?: Maybe<ReviewCreateInput>;
  connect?: Maybe<ReviewWhereUniqueInput>;
}

export interface ReviewCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMyReviewInput;
  title?: Maybe<String>;
  text: String;
  rating: Float;
  product?: Maybe<ProductCreateOneWithoutReviewsInput>;
  comments?: Maybe<CommentCreateManyWithoutReviewInput>;
  likes?: Maybe<LikeCreateManyWithoutReviewInput>;
  hates?: Maybe<HateCreateManyWithoutReviewInput>;
  reviewPhotos?: Maybe<PhotoCreateManyWithoutReviewInput>;
}

export interface CommentCreateOneInput {
  create?: Maybe<CommentCreateInput>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface ReportUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  review?: Maybe<ReviewUpdateOneInput>;
  comment?: Maybe<CommentUpdateOneInput>;
  why?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  avatar?: Maybe<String>;
  nickName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  keyword?: Maybe<KeywordUpdateManyInput>;
  password?: Maybe<String>;
  myReview?: Maybe<ReviewUpdateManyWithoutUserInput>;
  myProduct?: Maybe<ProductUpdateManyWithoutUserInput>;
  myComment?: Maybe<CommentUpdateManyWithoutUserInput>;
  myLike?: Maybe<LikeUpdateManyWithoutUserInput>;
  myHate?: Maybe<HateUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ReviewUpdateOneInput {
  create?: Maybe<ReviewCreateInput>;
  update?: Maybe<ReviewUpdateDataInput>;
  upsert?: Maybe<ReviewUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ReviewWhereUniqueInput>;
}

export interface ReviewUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMyReviewInput>;
  title?: Maybe<String>;
  text?: Maybe<String>;
  rating?: Maybe<Float>;
  product?: Maybe<ProductUpdateOneWithoutReviewsInput>;
  comments?: Maybe<CommentUpdateManyWithoutReviewInput>;
  likes?: Maybe<LikeUpdateManyWithoutReviewInput>;
  hates?: Maybe<HateUpdateManyWithoutReviewInput>;
  reviewPhotos?: Maybe<PhotoUpdateManyWithoutReviewInput>;
}

export interface ReviewUpsertNestedInput {
  update: ReviewUpdateDataInput;
  create: ReviewCreateInput;
}

export interface CommentUpdateOneInput {
  create?: Maybe<CommentCreateInput>;
  update?: Maybe<CommentUpdateDataInput>;
  upsert?: Maybe<CommentUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface CommentUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMyCommentInput>;
  review?: Maybe<ReviewUpdateOneRequiredWithoutCommentsInput>;
  text?: Maybe<String>;
}

export interface CommentUpsertNestedInput {
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface ReportUpdateManyMutationInput {
  why?: Maybe<String>;
}

export interface ReviewUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMyReviewInput>;
  title?: Maybe<String>;
  text?: Maybe<String>;
  rating?: Maybe<Float>;
  product?: Maybe<ProductUpdateOneWithoutReviewsInput>;
  comments?: Maybe<CommentUpdateManyWithoutReviewInput>;
  likes?: Maybe<LikeUpdateManyWithoutReviewInput>;
  hates?: Maybe<HateUpdateManyWithoutReviewInput>;
  reviewPhotos?: Maybe<PhotoUpdateManyWithoutReviewInput>;
}

export interface ReviewUpdateManyMutationInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
  rating?: Maybe<Float>;
}

export interface SuggestionCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  text: String;
}

export interface SuggestionUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  text?: Maybe<String>;
}

export interface SuggestionUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface SuperCategoryCreateInput {
  id?: Maybe<ID_Input>;
  superCategoryName: String;
  category?: Maybe<CategoryCreateManyWithoutSuperCategoryInput>;
}

export interface CategoryCreateManyWithoutSuperCategoryInput {
  create?: Maybe<
    | CategoryCreateWithoutSuperCategoryInput[]
    | CategoryCreateWithoutSuperCategoryInput
  >;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
}

export interface CategoryCreateWithoutSuperCategoryInput {
  id?: Maybe<ID_Input>;
  categoryName: String;
  product?: Maybe<ProductCreateManyWithoutCategoryInput>;
}

export interface SuperCategoryUpdateInput {
  superCategoryName?: Maybe<String>;
  category?: Maybe<CategoryUpdateManyWithoutSuperCategoryInput>;
}

export interface CategoryUpdateManyWithoutSuperCategoryInput {
  create?: Maybe<
    | CategoryCreateWithoutSuperCategoryInput[]
    | CategoryCreateWithoutSuperCategoryInput
  >;
  delete?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  connect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  set?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  disconnect?: Maybe<CategoryWhereUniqueInput[] | CategoryWhereUniqueInput>;
  update?: Maybe<
    | CategoryUpdateWithWhereUniqueWithoutSuperCategoryInput[]
    | CategoryUpdateWithWhereUniqueWithoutSuperCategoryInput
  >;
  upsert?: Maybe<
    | CategoryUpsertWithWhereUniqueWithoutSuperCategoryInput[]
    | CategoryUpsertWithWhereUniqueWithoutSuperCategoryInput
  >;
  deleteMany?: Maybe<CategoryScalarWhereInput[] | CategoryScalarWhereInput>;
  updateMany?: Maybe<
    | CategoryUpdateManyWithWhereNestedInput[]
    | CategoryUpdateManyWithWhereNestedInput
  >;
}

export interface CategoryUpdateWithWhereUniqueWithoutSuperCategoryInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutSuperCategoryDataInput;
}

export interface CategoryUpdateWithoutSuperCategoryDataInput {
  categoryName?: Maybe<String>;
  product?: Maybe<ProductUpdateManyWithoutCategoryInput>;
}

export interface CategoryUpsertWithWhereUniqueWithoutSuperCategoryInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutSuperCategoryDataInput;
  create: CategoryCreateWithoutSuperCategoryInput;
}

export interface SuperCategoryUpdateManyMutationInput {
  superCategoryName?: Maybe<String>;
}

export interface UserUpdateInput {
  avatar?: Maybe<String>;
  nickName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  keyword?: Maybe<KeywordUpdateManyInput>;
  password?: Maybe<String>;
  myReview?: Maybe<ReviewUpdateManyWithoutUserInput>;
  myProduct?: Maybe<ProductUpdateManyWithoutUserInput>;
  myComment?: Maybe<CommentUpdateManyWithoutUserInput>;
  myLike?: Maybe<LikeUpdateManyWithoutUserInput>;
  myHate?: Maybe<HateUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  avatar?: Maybe<String>;
  nickName?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface BlackListSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BlackListWhereInput>;
  AND?: Maybe<
    BlackListSubscriptionWhereInput[] | BlackListSubscriptionWhereInput
  >;
  OR?: Maybe<
    BlackListSubscriptionWhereInput[] | BlackListSubscriptionWhereInput
  >;
  NOT?: Maybe<
    BlackListSubscriptionWhereInput[] | BlackListSubscriptionWhereInput
  >;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface HateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HateWhereInput>;
  AND?: Maybe<HateSubscriptionWhereInput[] | HateSubscriptionWhereInput>;
  OR?: Maybe<HateSubscriptionWhereInput[] | HateSubscriptionWhereInput>;
  NOT?: Maybe<HateSubscriptionWhereInput[] | HateSubscriptionWhereInput>;
}

export interface KeywordSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<KeywordWhereInput>;
  AND?: Maybe<KeywordSubscriptionWhereInput[] | KeywordSubscriptionWhereInput>;
  OR?: Maybe<KeywordSubscriptionWhereInput[] | KeywordSubscriptionWhereInput>;
  NOT?: Maybe<KeywordSubscriptionWhereInput[] | KeywordSubscriptionWhereInput>;
}

export interface LikeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LikeWhereInput>;
  AND?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  OR?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  NOT?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
}

export interface PhotoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PhotoWhereInput>;
  AND?: Maybe<PhotoSubscriptionWhereInput[] | PhotoSubscriptionWhereInput>;
  OR?: Maybe<PhotoSubscriptionWhereInput[] | PhotoSubscriptionWhereInput>;
  NOT?: Maybe<PhotoSubscriptionWhereInput[] | PhotoSubscriptionWhereInput>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface ReportSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReportWhereInput>;
  AND?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
  OR?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
  NOT?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReviewWhereInput>;
  AND?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  OR?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  NOT?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
}

export interface SuggestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SuggestionWhereInput>;
  AND?: Maybe<
    SuggestionSubscriptionWhereInput[] | SuggestionSubscriptionWhereInput
  >;
  OR?: Maybe<
    SuggestionSubscriptionWhereInput[] | SuggestionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SuggestionSubscriptionWhereInput[] | SuggestionSubscriptionWhereInput
  >;
}

export interface SuperCategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SuperCategoryWhereInput>;
  AND?: Maybe<
    SuperCategorySubscriptionWhereInput[] | SuperCategorySubscriptionWhereInput
  >;
  OR?: Maybe<
    SuperCategorySubscriptionWhereInput[] | SuperCategorySubscriptionWhereInput
  >;
  NOT?: Maybe<
    SuperCategorySubscriptionWhereInput[] | SuperCategorySubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BlackList {
  id: ID_Output;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BlackListPromise extends Promise<BlackList>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BlackListSubscription
  extends Promise<AsyncIterator<BlackList>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BlackListNullablePromise
  extends Promise<BlackList | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BlackListConnection {
  pageInfo: PageInfo;
  edges: BlackListEdge[];
}

export interface BlackListConnectionPromise
  extends Promise<BlackListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BlackListEdge>>() => T;
  aggregate: <T = AggregateBlackListPromise>() => T;
}

export interface BlackListConnectionSubscription
  extends Promise<AsyncIterator<BlackListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BlackListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBlackListSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BlackListEdge {
  node: BlackList;
  cursor: String;
}

export interface BlackListEdgePromise
  extends Promise<BlackListEdge>,
    Fragmentable {
  node: <T = BlackListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BlackListEdgeSubscription
  extends Promise<AsyncIterator<BlackListEdge>>,
    Fragmentable {
  node: <T = BlackListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBlackList {
  count: Int;
}

export interface AggregateBlackListPromise
  extends Promise<AggregateBlackList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBlackListSubscription
  extends Promise<AsyncIterator<AggregateBlackList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Category {
  id: ID_Output;
  categoryName: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  categoryName: () => Promise<String>;
  product: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  superCategory: <T = SuperCategoryPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  categoryName: () => Promise<AsyncIterator<String>>;
  product: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  superCategory: <T = SuperCategorySubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  categoryName: () => Promise<String>;
  product: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  superCategory: <T = SuperCategoryPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Product {
  id: ID_Output;
  productName: String;
  isPublished?: Boolean;
  requestInfo: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  productName: () => Promise<String>;
  category: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  productPhoto: <T = PhotoPromise>() => T;
  isPublished: () => Promise<Boolean>;
  requestInfo: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  productName: () => Promise<AsyncIterator<String>>;
  category: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  productPhoto: <T = PhotoSubscription>() => T;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  requestInfo: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  productName: () => Promise<String>;
  category: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  productPhoto: <T = PhotoPromise>() => T;
  isPublished: () => Promise<Boolean>;
  requestInfo: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  avatar?: String;
  nickName: String;
  phone?: String;
  email: String;
  password: String;
  loginSecret?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  nickName: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  keyword: <T = FragmentableArray<Keyword>>(args?: {
    where?: KeywordWhereInput;
    orderBy?: KeywordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  password: () => Promise<String>;
  myReview: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myProduct: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myComment: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myLike: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myHate: <T = FragmentableArray<Hate>>(args?: {
    where?: HateWhereInput;
    orderBy?: HateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatar: () => Promise<AsyncIterator<String>>;
  nickName: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  keyword: <T = Promise<AsyncIterator<KeywordSubscription>>>(args?: {
    where?: KeywordWhereInput;
    orderBy?: KeywordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  password: () => Promise<AsyncIterator<String>>;
  myReview: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myProduct: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myComment: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myLike: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myHate: <T = Promise<AsyncIterator<HateSubscription>>>(args?: {
    where?: HateWhereInput;
    orderBy?: HateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  nickName: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  keyword: <T = FragmentableArray<Keyword>>(args?: {
    where?: KeywordWhereInput;
    orderBy?: KeywordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  password: () => Promise<String>;
  myReview: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myProduct: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myComment: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myLike: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  myHate: <T = FragmentableArray<Hate>>(args?: {
    where?: HateWhereInput;
    orderBy?: HateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Keyword {
  id: ID_Output;
  search: String;
  count: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface KeywordPromise extends Promise<Keyword>, Fragmentable {
  id: () => Promise<ID_Output>;
  search: () => Promise<String>;
  count: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface KeywordSubscription
  extends Promise<AsyncIterator<Keyword>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  search: () => Promise<AsyncIterator<String>>;
  count: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface KeywordNullablePromise
  extends Promise<Keyword | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  search: () => Promise<String>;
  count: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Review {
  id: ID_Output;
  title?: String;
  text: String;
  rating: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  text: () => Promise<String>;
  rating: () => Promise<Float>;
  product: <T = ProductPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hates: <T = FragmentableArray<Hate>>(args?: {
    where?: HateWhereInput;
    orderBy?: HateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviewPhotos: <T = FragmentableArray<Photo>>(args?: {
    where?: PhotoWhereInput;
    orderBy?: PhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Float>>;
  product: <T = ProductSubscription>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hates: <T = Promise<AsyncIterator<HateSubscription>>>(args?: {
    where?: HateWhereInput;
    orderBy?: HateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviewPhotos: <T = Promise<AsyncIterator<PhotoSubscription>>>(args?: {
    where?: PhotoWhereInput;
    orderBy?: PhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReviewNullablePromise
  extends Promise<Review | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  text: () => Promise<String>;
  rating: () => Promise<Float>;
  product: <T = ProductPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hates: <T = FragmentableArray<Hate>>(args?: {
    where?: HateWhereInput;
    orderBy?: HateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reviewPhotos: <T = FragmentableArray<Photo>>(args?: {
    where?: PhotoWhereInput;
    orderBy?: PhotoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Comment {
  id: ID_Output;
  text: String;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  review: <T = ReviewPromise>() => T;
  text: () => Promise<String>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  review: <T = ReviewSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  review: <T = ReviewPromise>() => T;
  text: () => Promise<String>;
}

export interface Like {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LikePromise extends Promise<Like>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  review: <T = ReviewPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LikeSubscription
  extends Promise<AsyncIterator<Like>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  review: <T = ReviewSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LikeNullablePromise
  extends Promise<Like | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  review: <T = ReviewPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Hate {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface HatePromise extends Promise<Hate>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  review: <T = ReviewPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HateSubscription
  extends Promise<AsyncIterator<Hate>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  review: <T = ReviewSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HateNullablePromise
  extends Promise<Hate | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  review: <T = ReviewPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Photo {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PhotoPromise extends Promise<Photo>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  review: <T = ReviewPromise>() => T;
  product: <T = ProductPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PhotoSubscription
  extends Promise<AsyncIterator<Photo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  review: <T = ReviewSubscription>() => T;
  product: <T = ProductSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PhotoNullablePromise
  extends Promise<Photo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  review: <T = ReviewPromise>() => T;
  product: <T = ProductPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SuperCategory {
  id: ID_Output;
  superCategoryName: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SuperCategoryPromise
  extends Promise<SuperCategory>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  superCategoryName: () => Promise<String>;
  category: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SuperCategorySubscription
  extends Promise<AsyncIterator<SuperCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  superCategoryName: () => Promise<AsyncIterator<String>>;
  category: <T = Promise<AsyncIterator<CategorySubscription>>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SuperCategoryNullablePromise
  extends Promise<SuperCategory | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  superCategoryName: () => Promise<String>;
  category: <T = FragmentableArray<Category>>(args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HateConnection {
  pageInfo: PageInfo;
  edges: HateEdge[];
}

export interface HateConnectionPromise
  extends Promise<HateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HateEdge>>() => T;
  aggregate: <T = AggregateHatePromise>() => T;
}

export interface HateConnectionSubscription
  extends Promise<AsyncIterator<HateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHateSubscription>() => T;
}

export interface HateEdge {
  node: Hate;
  cursor: String;
}

export interface HateEdgePromise extends Promise<HateEdge>, Fragmentable {
  node: <T = HatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface HateEdgeSubscription
  extends Promise<AsyncIterator<HateEdge>>,
    Fragmentable {
  node: <T = HateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHate {
  count: Int;
}

export interface AggregateHatePromise
  extends Promise<AggregateHate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHateSubscription
  extends Promise<AsyncIterator<AggregateHate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface KeywordConnection {
  pageInfo: PageInfo;
  edges: KeywordEdge[];
}

export interface KeywordConnectionPromise
  extends Promise<KeywordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<KeywordEdge>>() => T;
  aggregate: <T = AggregateKeywordPromise>() => T;
}

export interface KeywordConnectionSubscription
  extends Promise<AsyncIterator<KeywordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<KeywordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateKeywordSubscription>() => T;
}

export interface KeywordEdge {
  node: Keyword;
  cursor: String;
}

export interface KeywordEdgePromise extends Promise<KeywordEdge>, Fragmentable {
  node: <T = KeywordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface KeywordEdgeSubscription
  extends Promise<AsyncIterator<KeywordEdge>>,
    Fragmentable {
  node: <T = KeywordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateKeyword {
  count: Int;
}

export interface AggregateKeywordPromise
  extends Promise<AggregateKeyword>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateKeywordSubscription
  extends Promise<AsyncIterator<AggregateKeyword>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LikeConnection {
  pageInfo: PageInfo;
  edges: LikeEdge[];
}

export interface LikeConnectionPromise
  extends Promise<LikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LikeEdge>>() => T;
  aggregate: <T = AggregateLikePromise>() => T;
}

export interface LikeConnectionSubscription
  extends Promise<AsyncIterator<LikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLikeSubscription>() => T;
}

export interface LikeEdge {
  node: Like;
  cursor: String;
}

export interface LikeEdgePromise extends Promise<LikeEdge>, Fragmentable {
  node: <T = LikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LikeEdgeSubscription
  extends Promise<AsyncIterator<LikeEdge>>,
    Fragmentable {
  node: <T = LikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLike {
  count: Int;
}

export interface AggregateLikePromise
  extends Promise<AggregateLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLikeSubscription
  extends Promise<AsyncIterator<AggregateLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PhotoConnection {
  pageInfo: PageInfo;
  edges: PhotoEdge[];
}

export interface PhotoConnectionPromise
  extends Promise<PhotoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PhotoEdge>>() => T;
  aggregate: <T = AggregatePhotoPromise>() => T;
}

export interface PhotoConnectionSubscription
  extends Promise<AsyncIterator<PhotoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PhotoEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePhotoSubscription>() => T;
}

export interface PhotoEdge {
  node: Photo;
  cursor: String;
}

export interface PhotoEdgePromise extends Promise<PhotoEdge>, Fragmentable {
  node: <T = PhotoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PhotoEdgeSubscription
  extends Promise<AsyncIterator<PhotoEdge>>,
    Fragmentable {
  node: <T = PhotoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePhoto {
  count: Int;
}

export interface AggregatePhotoPromise
  extends Promise<AggregatePhoto>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePhotoSubscription
  extends Promise<AsyncIterator<AggregatePhoto>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Report {
  id: ID_Output;
  why: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReportPromise extends Promise<Report>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  review: <T = ReviewPromise>() => T;
  comment: <T = CommentPromise>() => T;
  why: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReportSubscription
  extends Promise<AsyncIterator<Report>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  review: <T = ReviewSubscription>() => T;
  comment: <T = CommentSubscription>() => T;
  why: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReportNullablePromise
  extends Promise<Report | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  review: <T = ReviewPromise>() => T;
  comment: <T = CommentPromise>() => T;
  why: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReportConnection {
  pageInfo: PageInfo;
  edges: ReportEdge[];
}

export interface ReportConnectionPromise
  extends Promise<ReportConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReportEdge>>() => T;
  aggregate: <T = AggregateReportPromise>() => T;
}

export interface ReportConnectionSubscription
  extends Promise<AsyncIterator<ReportConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReportEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReportSubscription>() => T;
}

export interface ReportEdge {
  node: Report;
  cursor: String;
}

export interface ReportEdgePromise extends Promise<ReportEdge>, Fragmentable {
  node: <T = ReportPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReportEdgeSubscription
  extends Promise<AsyncIterator<ReportEdge>>,
    Fragmentable {
  node: <T = ReportSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReport {
  count: Int;
}

export interface AggregateReportPromise
  extends Promise<AggregateReport>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReportSubscription
  extends Promise<AsyncIterator<AggregateReport>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Suggestion {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SuggestionPromise extends Promise<Suggestion>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SuggestionSubscription
  extends Promise<AsyncIterator<Suggestion>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SuggestionNullablePromise
  extends Promise<Suggestion | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SuggestionConnection {
  pageInfo: PageInfo;
  edges: SuggestionEdge[];
}

export interface SuggestionConnectionPromise
  extends Promise<SuggestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SuggestionEdge>>() => T;
  aggregate: <T = AggregateSuggestionPromise>() => T;
}

export interface SuggestionConnectionSubscription
  extends Promise<AsyncIterator<SuggestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SuggestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSuggestionSubscription>() => T;
}

export interface SuggestionEdge {
  node: Suggestion;
  cursor: String;
}

export interface SuggestionEdgePromise
  extends Promise<SuggestionEdge>,
    Fragmentable {
  node: <T = SuggestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SuggestionEdgeSubscription
  extends Promise<AsyncIterator<SuggestionEdge>>,
    Fragmentable {
  node: <T = SuggestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSuggestion {
  count: Int;
}

export interface AggregateSuggestionPromise
  extends Promise<AggregateSuggestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSuggestionSubscription
  extends Promise<AsyncIterator<AggregateSuggestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SuperCategoryConnection {
  pageInfo: PageInfo;
  edges: SuperCategoryEdge[];
}

export interface SuperCategoryConnectionPromise
  extends Promise<SuperCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SuperCategoryEdge>>() => T;
  aggregate: <T = AggregateSuperCategoryPromise>() => T;
}

export interface SuperCategoryConnectionSubscription
  extends Promise<AsyncIterator<SuperCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SuperCategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSuperCategorySubscription>() => T;
}

export interface SuperCategoryEdge {
  node: SuperCategory;
  cursor: String;
}

export interface SuperCategoryEdgePromise
  extends Promise<SuperCategoryEdge>,
    Fragmentable {
  node: <T = SuperCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SuperCategoryEdgeSubscription
  extends Promise<AsyncIterator<SuperCategoryEdge>>,
    Fragmentable {
  node: <T = SuperCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSuperCategory {
  count: Int;
}

export interface AggregateSuperCategoryPromise
  extends Promise<AggregateSuperCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSuperCategorySubscription
  extends Promise<AsyncIterator<AggregateSuperCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BlackListSubscriptionPayload {
  mutation: MutationType;
  node: BlackList;
  updatedFields: String[];
  previousValues: BlackListPreviousValues;
}

export interface BlackListSubscriptionPayloadPromise
  extends Promise<BlackListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BlackListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BlackListPreviousValuesPromise>() => T;
}

export interface BlackListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BlackListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BlackListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BlackListPreviousValuesSubscription>() => T;
}

export interface BlackListPreviousValues {
  id: ID_Output;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BlackListPreviousValuesPromise
  extends Promise<BlackListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BlackListPreviousValuesSubscription
  extends Promise<AsyncIterator<BlackListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  categoryName: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  categoryName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  categoryName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface HateSubscriptionPayload {
  mutation: MutationType;
  node: Hate;
  updatedFields: String[];
  previousValues: HatePreviousValues;
}

export interface HateSubscriptionPayloadPromise
  extends Promise<HateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HatePreviousValuesPromise>() => T;
}

export interface HateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HatePreviousValuesSubscription>() => T;
}

export interface HatePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface HatePreviousValuesPromise
  extends Promise<HatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface HatePreviousValuesSubscription
  extends Promise<AsyncIterator<HatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface KeywordSubscriptionPayload {
  mutation: MutationType;
  node: Keyword;
  updatedFields: String[];
  previousValues: KeywordPreviousValues;
}

export interface KeywordSubscriptionPayloadPromise
  extends Promise<KeywordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = KeywordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = KeywordPreviousValuesPromise>() => T;
}

export interface KeywordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<KeywordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = KeywordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = KeywordPreviousValuesSubscription>() => T;
}

export interface KeywordPreviousValues {
  id: ID_Output;
  search: String;
  count: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface KeywordPreviousValuesPromise
  extends Promise<KeywordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  search: () => Promise<String>;
  count: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface KeywordPreviousValuesSubscription
  extends Promise<AsyncIterator<KeywordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  search: () => Promise<AsyncIterator<String>>;
  count: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LikeSubscriptionPayload {
  mutation: MutationType;
  node: Like;
  updatedFields: String[];
  previousValues: LikePreviousValues;
}

export interface LikeSubscriptionPayloadPromise
  extends Promise<LikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LikePreviousValuesPromise>() => T;
}

export interface LikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LikePreviousValuesSubscription>() => T;
}

export interface LikePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LikePreviousValuesPromise
  extends Promise<LikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LikePreviousValuesSubscription
  extends Promise<AsyncIterator<LikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PhotoSubscriptionPayload {
  mutation: MutationType;
  node: Photo;
  updatedFields: String[];
  previousValues: PhotoPreviousValues;
}

export interface PhotoSubscriptionPayloadPromise
  extends Promise<PhotoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PhotoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PhotoPreviousValuesPromise>() => T;
}

export interface PhotoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PhotoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PhotoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PhotoPreviousValuesSubscription>() => T;
}

export interface PhotoPreviousValues {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PhotoPreviousValuesPromise
  extends Promise<PhotoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PhotoPreviousValuesSubscription
  extends Promise<AsyncIterator<PhotoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  productName: String;
  isPublished?: Boolean;
  requestInfo: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  productName: () => Promise<String>;
  isPublished: () => Promise<Boolean>;
  requestInfo: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  productName: () => Promise<AsyncIterator<String>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  requestInfo: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReportSubscriptionPayload {
  mutation: MutationType;
  node: Report;
  updatedFields: String[];
  previousValues: ReportPreviousValues;
}

export interface ReportSubscriptionPayloadPromise
  extends Promise<ReportSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReportPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReportPreviousValuesPromise>() => T;
}

export interface ReportSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReportSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReportSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReportPreviousValuesSubscription>() => T;
}

export interface ReportPreviousValues {
  id: ID_Output;
  why: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReportPreviousValuesPromise
  extends Promise<ReportPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  why: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReportPreviousValuesSubscription
  extends Promise<AsyncIterator<ReportPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  why: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface ReviewPreviousValues {
  id: ID_Output;
  title?: String;
  text: String;
  rating: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  rating: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SuggestionSubscriptionPayload {
  mutation: MutationType;
  node: Suggestion;
  updatedFields: String[];
  previousValues: SuggestionPreviousValues;
}

export interface SuggestionSubscriptionPayloadPromise
  extends Promise<SuggestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SuggestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SuggestionPreviousValuesPromise>() => T;
}

export interface SuggestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SuggestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SuggestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SuggestionPreviousValuesSubscription>() => T;
}

export interface SuggestionPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SuggestionPreviousValuesPromise
  extends Promise<SuggestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SuggestionPreviousValuesSubscription
  extends Promise<AsyncIterator<SuggestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SuperCategorySubscriptionPayload {
  mutation: MutationType;
  node: SuperCategory;
  updatedFields: String[];
  previousValues: SuperCategoryPreviousValues;
}

export interface SuperCategorySubscriptionPayloadPromise
  extends Promise<SuperCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SuperCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SuperCategoryPreviousValuesPromise>() => T;
}

export interface SuperCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SuperCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SuperCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SuperCategoryPreviousValuesSubscription>() => T;
}

export interface SuperCategoryPreviousValues {
  id: ID_Output;
  superCategoryName: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SuperCategoryPreviousValuesPromise
  extends Promise<SuperCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  superCategoryName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SuperCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<SuperCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  superCategoryName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  avatar?: String;
  nickName: String;
  phone?: String;
  email: String;
  password: String;
  loginSecret?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  nickName: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatar: () => Promise<AsyncIterator<String>>;
  nickName: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  loginSecret: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Keyword",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Like",
    embedded: false
  },
  {
    name: "Hate",
    embedded: false
  },
  {
    name: "Photo",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "SuperCategory",
    embedded: false
  },
  {
    name: "Report",
    embedded: false
  },
  {
    name: "Suggestion",
    embedded: false
  },
  {
    name: "BlackList",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
