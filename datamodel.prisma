type User {
  id: ID! @id
  avatar: String
    @default(
      value: "https://review-photo.s3.ap-northeast-2.amazonaws.com/Group+39.png"
    )
  nickName: String! @unique
  phone: String
  email: String! @unique
  keyword: [Keyword]
  password: String!
  myReview: [Review!]! @relation(name: "ReviewsOfUser", onDelete: CASCADE)
  myProduct: [Product!]! @relation(name: "ProductsOfUser")
  myComment: [Comment!]! @relation(name: "CommentsOfUser", onDelete: CASCADE)
  myLike: [Like!]! @relation(name: "LikesOfUser", onDelete: CASCADE)
  myHate: [Hate!]! @relation(name: "HatesOfUser", onDelete: CASCADE)
  loginSecret: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Product {
  id: ID! @id
  user: User @relation(name: "ProductsOfUser")
  productName: String! @unique
  category: [Category]
  reviews: [Review] @relation(name: "ReviewsOfProduct", onDelete: CASCADE)
  productPhoto: Photo @relation(name: "PhotosOfProduct", onDelete: CASCADE)
  isPublished: Boolean @default(value: false)
  requestInfo: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Keyword {
  id: ID! @id
  search: String! @unique
  count: Int! @default(value: 1)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Review {
  id: ID! @id
  user: User! @relation(name: "ReviewsOfUser")
  title: String
  text: String!
  rating: Float!
  product: Product @relation(name: "ReviewsOfProduct")
  comments: [Comment] @relation(name: "CommentsOfReview", onDelete: CASCADE)
  likes: [Like!]! @relation(name: "LikesOfReview", onDelete: CASCADE)
  hates: [Hate!]! @relation(name: "HatesOfReview", onDelete: CASCADE)
  reviewPhotos: [Photo] @relation(name: "PhotosOfReview", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Comment {
  id: ID! @id
  user: User! @relation(name: "CommentsOfUser")
  review: Review! @relation(name: "CommentsOfReview")
  text: String!
}

type Like {
  id: ID! @id
  user: User @relation(name: "LikesOfUser")
  review: Review @relation(name: "LikesOfReview")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Hate {
  id: ID! @id
  user: User @relation(name: "HatesOfUser")
  review: Review @relation(name: "HatesOfReview")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Photo {
  id: ID! @id
  url: String!
  review: Review @relation(name: "PhotosOfReview")
  product: Product @relation(name: "PhotosOfProduct")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Category {
  id: ID! @id
  categoryName: String!
  product: [Product]
  superCategory: SuperCategory
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type SuperCategory {
  id: ID! @id
  superCategoryName: String!
  category: [Category]
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Report {
  id: ID! @id
  user: User!
  review: Review
  comment: Comment
  why: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Suggestion {
  id: ID! @id
  user: User!
  text: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type BlackList {
  id: ID! @id
  email: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}
